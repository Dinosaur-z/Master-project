# Package used
import pandas as pd
import os
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import scipy.stats as stats
from scipy.stats import spearmanr
from scipy.stats import pearsonr
from scipy.stats import linregress
from scipy.stats import mannwhitneyu
from datetime import datetime
from statsmodels.formula.api import ols
from statsmodels.stats.multicomp import pairwise_tukeyhsd
import scikit_posthocs as sp
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from mpl_toolkits.mplot3d import Axes3D
from statsmodels.nonparametric.smoothers_lowess import lowess
import glob
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score



### Note ###
# From here I started to do my actual experiment run with the antibody combination that works well in IF
# Sample 1E: LM048 (G4), Hif-1a, CD36
# Sample 2E: LM048 (G4), Fasn, CD36
# Samples were taken on 0314 / 0320 / 0326 -> three replicates

############## Data Gating #############
def set_threshold(input_file, thresholds):
    """Apply thresholds to the dataset and save the filtered data."""

    # Extract base name and create output filename
    base_name = os.path.splitext(os.path.basename(input_file))[0]
    output_file = f"{base_name}_filter.csv"

    # Read input file
    df = pd.read_csv(input_file)

    # Apply the thresholds
    for column, threshold in thresholds.items():
        if column in df.columns:
            df = df[df[column] >= threshold]
        else:
            print(f"Warning: '{column}' not found in CSV file.")

    # Save filtered data
    df.to_csv(output_file, index=False)
    print(f"Filtered data saved to: {output_file}")
    print(f"Filtered data saved to: {os.path.abspath(output_file)}")
    return output_file


###== Male EPI ==###


# Second replicate -> Exp II
thresholds_ExpII_1E = {'circularity':0.97, 'perimeter':250}
filter_ExpII_1E = set_threshold('/Users/dinosaur.z/Desktop/1E_1.csv', thresholds_ExpII_1E)

thresholds_ExpII_2E = {'circularity':0.96, 'perimeter':280}
filter_ExpII_2E = set_threshold('/Users/dinosaur.z/Desktop/2E_2.csv', thresholds_ExpII_2E)

# Third replicate
thresholds_ExpIII_1E = {'circularity': 0.987, 'perimeter':288}
filter_ExpIII_1E = set_threshold('/Users/dinosaur.z/Desktop/1E_sample2.csv', thresholds_ExpIII_1E)

thresholds_ExpIII_2E = {'circularity': 0.988, 'perimeter': 294}
filter_ExpIII_2E = set_threshold('/Users/dinosaur.z/Desktop/2E_2.csv', thresholds_ExpIII_2E)

# Forth replicate
thresholds_ExpIV_1E = {'circularity': 0.992, 'perimeter': 228}
filter_ExpIV_1E = set_threshold('/Users/dinosaur.z/Desktop/1E_2.csv', thresholds_ExpIV_1E)

thresholds_ExpIV_2E = {'circularity': 0.994, 'perimeter': 227}
filter_ExpIV_2E = set_threshold('/Users/dinosaur.z/Desktop/2E_2.csv', thresholds_ExpIV_2E)

###== Female PG ==###
# First replicate
thresholds_ExpI_1PG = {'circularity': 0.893, 'perimeter': 232}
filter_ExpI_1PG = set_threshold('/Users/dinosaur.z/Desktop/1PG.csv', thresholds_ExpI_1PG)

thresholds_ExpI_2PG = {'circularity': 0.959, 'perimeter': 233}
filter_ExpI_2PG = set_threshold('/Users/dinosaur.z/Desktop/2PG.csv', thresholds_ExpI_2PG)

# Second replicate -> remember to RUN
thresholds_ExpII_1PG = {'circularity': 0.95, 'perimeter': 125.81}
filter_ExpII_1PG = set_threshold("/Users/dinosaur.z/Desktop/1PG.csv", thresholds_ExpII_1PG)

thresholds_ExpII_2PG = {'circularity': 0.93, 'perimeter': 222.355}
filter_ExpII_2PG = set_threshold("/Users/dinosaur.z/Desktop/2PG.csv", thresholds_ExpII_2PG)

thresholds_ExpIII_1PG = {'circularity': 0.947, 'perimeter': 223.465}
filter_ExpIII_1PG = set_threshold("/Users/dinosaur.z/Desktop/1PG_s1_1.csv", thresholds_ExpIII_1PG)

thresholds_ExpIII_2PG = {'circularity': 0.986, 'perimeter': 225.687}
filter_ExpIII_2PG = set_threshold("/Users/dinosaur.z/Desktop/2PG_s2_2.csv", thresholds_ExpIII_2PG)



############## Data calculation / conversion #############
def calculate_all_metrics(filtered_file):
    """Calculates sum intensity, diameter, and cell volume, and saves results."""

    df = pd.read_csv(filtered_file)

    # Check if necessary columns exist
    required_columns = ['area (pixels)', 'mean_Alexa 488', 'mean_Alexa 568', 'mean_Alexa 647']
    missing_columns = [col for col in required_columns if col not in df.columns]

    if missing_columns:
        print(f"Error: Missing required columns: {missing_columns}")
        return None

    df['mean_488[/µm²]'] = df['mean_Alexa 488'] / 0.298656
    df['mean_568[/µm²]'] = df['mean_Alexa 568'] / 0.298656
    df['mean_647[/µm²]'] = df['mean_Alexa 647'] / 0.298656

    # Compute diameter (ensure major/minor axis columns exist)
    if 'major_axis_length' in df.columns and 'minor_axis_length' in df.columns:
        df['diameter'] = 0.5465 * (df['major_axis_length'] + df['minor_axis_length']) / 2
    else:
        print("Error: Missing 'major_axis_length' or 'minor_axis_length' columns.")

    # Compute cell volume (only if diameter was calculated)
    if 'diameter' in df.columns:
        df['cell_volume'] = (4 / 3) * np.pi * (df['diameter'] / 2) ** 3
    else:
        print("Error: 'diameter' column not found for volume calculation.")

    # Save the updated data
    df.to_csv(filtered_file, index=False)
    print(f"Updated file with calculated metrics saved to: {filtered_file}")

    # Save an Excel copy on Desktop
    desktop_path = "/Users/dinosaur.z/Desktop/updated_data.xlsx"  # Replace 'your_username'
    df.to_excel(desktop_path, index=False)
    print(f"Excel copy saved to: {desktop_path}")

    return filtered_file


# Final data file that is used for data analysis (saved in both csv. and xlsx.)
# Need to run one by one, otherwise the "Updated_data" will be overwrited
Final_ExpII_1E = calculate_all_metrics(filter_ExpII_1E)
Final_ExpII_2E = calculate_all_metrics(filter_ExpII_2E)
Final_ExpIII_1E = calculate_all_metrics(filter_ExpIII_1E)
Final_ExpIII_2E = calculate_all_metrics(filter_ExpIII_2E)
Final_ExpIV_1E = calculate_all_metrics(filter_ExpIV_1E)
Final_ExpIV_2E = calculate_all_metrics(filter_ExpIV_2E)

Final_ExpI_1PG = calculate_all_metrics(filter_ExpI_1PG)
Final_ExpI_2PG = calculate_all_metrics(filter_ExpI_2PG)
Final_ExpII_1PG = calculate_all_metrics(filter_ExpII_1PG)
Final_ExpII_2PG = calculate_all_metrics(filter_ExpII_2PG)
Final_ExpIII_1PG = calculate_all_metrics(filter_ExpIII_1PG)
Final_ExpIII_2PG = calculate_all_metrics(filter_ExpIII_2PG)
